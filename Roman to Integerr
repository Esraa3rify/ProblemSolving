class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        
        //result=the last element
        int result = map.get(s.charAt(s.length()-1));
        
        //i on the second last element on the right // ex: 50 5 4 3 1 so i =3
        
        for(int i = s.length()-2; i >= 0; i--) {
        
        //if the right element more than the left element (not the usual state in remon nums)
        
            if(map.get(s.charAt(i)) < map.get(s.charAt(i+1))){
                result-=map.get(s.charAt(i));
            }
            else {
                result+=map.get(s.charAt(i));
            }
        } 
        return result;
    }
}


//ANOTHER SOLUTION


class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap();
            map.put('I', 1);
            map.put('V', 5);
            map.put('X', 10);
            map.put('L', 50);
            map.put('C', 100);
            map.put('D', 500);
            map.put('M', 1000);

            int result = 0;
            for (int i = 0; i < s.length(); i++) {
                if (i > 0 && map.get(s.charAt(i)) > map.get(s.charAt(i - 1))) {
                
                //tricky mathematical way to deal with the subtraction process
                
                    result += map.get(s.charAt(i)) - 2 * map.get(s.charAt(i - 1));
                } else {
                    result += map.get(s.charAt(i));
                }
            }
            return result;
    }
}
