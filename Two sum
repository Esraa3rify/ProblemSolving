Using Arrays and two pointers.


class Solution {
    public int[] twoSum(int[] nums, int target) {

        int[] index= new int[2];

        for(int i=0;i<nums.length;++i){
            for(int x=i+1;x<nums.length;++x){
                if(target==nums[i] + nums[x]){
                     index[0]=i;
                     index[1]=x;
                     return index;
                    
                }
            }
        }
        return index ;
    }
}



Using Brute force

class Solution {
    public int[] twoSum(int[] nums, int target) {


        for(int i=0;i<nums.length;i++){
            for(int x=i+1;x<nums.length;x++){
                int complement=target-nums[i];
                if(complement==nums[x]){
                    return new int [] {i,x};
                }
            }
        }

        throw new IllegalArgumentException("No match found");
        
    }
}


Using HasMap.


class Solution {
    public int[] twoSum(int[] nums, int target) {


    // Create a HashMap
    Map<Integer, Integer> map = new HashMap<>();

    for (int i = 0; i < nums.length; i++) {

      // Get the complement using the target value
      int complement = target - nums[i];

      // Search the hashmap for complement, if found, we got our pair
      if (map.containsKey(complement)) {
        return new int[]{map.get(complement), i};
      }

      // Put the element in hashmap for subsequent searches.
      map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
  }

}
